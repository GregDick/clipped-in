'use strict';

angular.module('clippedIn').controller('PersonCtrl', function (Profile, $routeParams, FB_URL, $filter, $scope, $rootScope, $location, Outside, SweetAlert) {
  //=====================THIS CONTROLLER IS FOR VIEWING SOMEONE ELSE'S PROFILE===================
  var main = this;

  //call popover toggle function
  main.toggleTop = function () {
    $('.topPop').popover('toggle');
  };
  main.toggleLead = function () {
    $('.leadPop').popover('toggle');
  };
  //gets user information
  var fb = new Firebase(FB_URL);
  var authData = fb.getAuth();

  //gets id of profile that is being viewed
  main.id = $routeParams.id;

  //if this is your own profile redirect to /#/profile
  if (authData.uid === main.id) {
    $location.path('/profile');
  }

  Profile.getProfile(main.id, function (profileObj) {
    main.profileObj = profileObj;
    //set topRope and lead as booleans
    main.topRope = $filter('lowercase')(profileObj.topRope) === 'yes' ? true : false;
    main.lead = $filter('lowercase')(profileObj.lead) === 'yes' ? true : false;
    //set belay string
    if (main.topRope && main.lead) {
      main.belay = ' can top-rope AND lead belay';
    } else if (main.topRope && !main.lead) {
      main.belay = ' can top-rope belay but doesn\'t know how to lead belay yet...';
    } else if (!main.topRope && main.lead) {
      main.belay = ' can lead belay but doesn\'t know how to top-rope belay yet...';
    } else {
      main.belay = ' doesn\'t know how to belay yet...';
    }
  });

  checkTopRope();
  checkLead();

  main.endorseTopRope = function () {
    Profile.addTopRope(main.id, authData.uid, function () {
      checkTopRope();
      SweetAlert.swal({
        title: '+1 Top-Rope Belay!',
        type: 'success',
        showConfirmButton: false,
        timer: 1500
      });
    });
  };
  main.endorseLead = function () {
    Profile.addLead(main.id, authData.uid, function () {
      checkLead();
      SweetAlert.swal({
        title: '+1 Lead Belay!',
        type: 'success',
        showConfirmButton: false,
        timer: 1500
      });
    });
  };

  function checkTopRope() {
    Profile.getTopRope(main.id, function (res) {
      main.topRopeNames = [];
      //makes sure you can't endorse twice and sets popover array
      for (var id in res) {
        if (res[id] === authData.uid) {
          main.disableTopRope = true;
        }
        Profile.getProfile(res[id], function (profileObj) {
          main.topRopeNames.push(profileObj.name);
          console.log(profileObj);
          //lists first + number of endorsed
          if (main.topRopeNames.length > 2) {
            main.topRopePeople = main.topRopeNames[0] + ' and ' + (main.topRopeNames.length - 1) + ' other people think ';
          } else if (main.topRopeNames.length === 2) {
            main.topRopePeople = main.topRopeNames[0] + ' and 1 other person think ';
          } else {
            main.topRopePeople = main.topRopeNames[0] + ' thinks ';
          }
        });
      }
    });
  };

  function checkLead() {
    Profile.getLead(main.id, function (res) {
      main.leadNames = [];
      //makes sure you can't endorse twice and sets popover array
      for (var id in res) {
        if (res[id] === authData.uid) {
          main.disableLead = true;
        }
        Profile.getProfile(res[id], function (profileObj) {
          main.leadNames.push(profileObj.name);
          //lists whoever endorsed
          if (main.leadNames.length > 2) {
            main.leadPeople = main.leadNames[0] + ' and ' + (main.leadNames.length - 1) + ' other people think ';
          } else if (main.leadNames.length === 2) {
            main.leadPeople = main.leadNames[0] + ' and 1 other person think ';
          } else {
            main.leadPeople = main.leadNames[0] + ' thinks ';
          }
        });
      }
    });
  };

  //get trip list to see if profile should link to trip
  Outside.getTrips(function (trips) {
    main.trips = trips;
    for (var id in trips) {
      if (main.id === id) {
        main.tripLink = '/#/trip/' + id;
      }
    }
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hc3NldHMvdXNlcnMvcGVyc29uLmNvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQ0osTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUNuQixVQUFVLENBQUMsWUFBWSxFQUFFLFVBQVMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUM7O0FBRTVILE1BQUksSUFBSSxHQUFHLElBQUksQ0FBQzs7O0FBS2hCLE1BQUksQ0FBQyxTQUFTLEdBQUcsWUFBVztBQUMxQixLQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQ2hDLENBQUE7QUFDRCxNQUFJLENBQUMsVUFBVSxHQUFHLFlBQVc7QUFDM0IsS0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUNqQyxDQUFBOztBQUVELE1BQUksRUFBRSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLE1BQUksUUFBUSxHQUFHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7O0FBRzVCLE1BQUksQ0FBQyxFQUFFLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQzs7O0FBRzFCLE1BQUcsUUFBUSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsRUFBRSxFQUFDO0FBQzFCLGFBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7R0FDNUI7O0FBRUQsU0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFVBQVMsVUFBVSxFQUFDO0FBQzlDLFFBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDOztBQUU3QixRQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxH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Q0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO1dBQ2xEO1NBQ0YsQ0FBQyxDQUFBO09BQ0g7S0FDRixDQUFDLENBQUE7R0FDSCxDQUFDOzs7QUFHRixTQUFPLENBQUMsUUFBUSxDQUFDLFVBQVMsS0FBSyxFQUFDO0FBQzlCLFFBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ25CLFNBQUksSUFBSSxFQUFFLElBQUksS0FBSyxFQUFDO0FBQ2xCLFVBQUcsSUFBSSxDQUFDLEVBQUUsS0FBRyxFQUFFLEVBQUM7QUFDZCxZQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsR0FBQyxFQUFFLENBQUM7T0FDL0I7S0FDRjtHQUNGLENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQSIsImZpbGUiOiJzcmMvYXNzZXRzL3VzZXJzL3BlcnNvbi5jb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhclxuICAubW9kdWxlKCdjbGlwcGVkSW4nKVxuICAuY29udHJvbGxlcignUGVyc29uQ3RybCcsIGZ1bmN0aW9uKFByb2ZpbGUsICRyb3V0ZVBhcmFtcywgRkJfVVJMLCAkZmlsdGVyLCAkc2NvcGUsICRyb290U2NvcGUsICRsb2NhdGlvbiwgT3V0c2lkZSwgU3dlZXRBbGVydCl7XG4vLz09PT09PT09PT09PT09PT09PT09PVRISVMgQ09OVFJPTExFUiBJUyBGT1IgVklFV0lORyBTT01FT05FIEVMU0UnUyBQUk9GSUxFPT09PT09PT09PT09PT09PT09PVxuICAgIHZhciBtYWluID0gdGhpcztcblxuXG5cbiAgICAvL2NhbGwgcG9wb3ZlciB0b2dnbGUgZnVuY3Rpb25cbiAgICBtYWluLnRvZ2dsZVRvcCA9IGZ1bmN0aW9uICgpe1xuICAgICAgJCgnLnRvcFBvcCcpLnBvcG92ZXIoJ3RvZ2dsZScpO1xuICAgIH1cbiAgICBtYWluLnRvZ2dsZUxlYWQgPSBmdW5jdGlvbiAoKXtcbiAgICAgICQoJy5sZWFkUG9wJykucG9wb3ZlcigndG9nZ2xlJyk7XG4gICAgfVxuICAgIC8vZ2V0cyB1c2VyIGluZm9ybWF0aW9uXG4gICAgdmFyIGZiID0gbmV3IEZpcmViYXNlKEZCX1VSTCk7XG4gICAgdmFyIGF1dGhEYXRhID0gZmIuZ2V0QXV0aCgpO1xuXG4gICAgLy9nZXRzIGlkIG9mIHByb2ZpbGUgdGhhdCBpcyBiZWluZyB2aWV3ZWRcbiAgICBtYWluLmlkID0gJHJvdXRlUGFyYW1zLmlkO1xuXG4gICAgLy9pZiB0aGlzIGlzIHlvdXIgb3duIHByb2ZpbGUgcmVkaXJlY3QgdG8gLyMvcHJvZmlsZVxuICAgIGlmKGF1dGhEYXRhLnVpZCA9PT0gbWFpbi5pZCl7XG4gICAgICAkbG9jYXRpb24ucGF0aCgnL3Byb2ZpbGUnKTtcbiAgICB9XG5cbiAgICBQcm9maWxlLmdldFByb2ZpbGUobWFpbi5pZCwgZnVuY3Rpb24ocHJvZmlsZU9iail7XG4gICAgICBtYWluLnByb2ZpbGVPYmogPSBwcm9maWxlT2JqO1xuICAgICAgLy9zZXQgdG9wUm9wZSBhbmQgbGVhZCBhcyBib29sZWFuc1xuICAgICAgbWFpbi50b3BSb3BlID0gJGZpbHRlcignbG93ZXJjYXNlJykocHJvZmlsZU9iai50b3BSb3BlKSA9PT0gJ3llcycgPyB0cnVlIDogZmFsc2U7XG4gICAgICBtYWluLmxlYWQgPSAkZmlsdGVyKCdsb3dlcmNhc2UnKShwcm9maWxlT2JqLmxlYWQpID09PSAneWVzJyA/IHRydWUgOiBmYWxzZTtcbiAgICAgIC8vc2V0IGJlbGF5IHN0cmluZ1xuICAgICAgICBpZihtYWluLnRvcFJvcGUgJiYgbWFpbi5sZWFkKXtcbiAgICAgICAgICBtYWluLmJlbGF5ID0gJyBjYW4gdG9wLXJvcGUgQU5EIGxlYWQgYmVsYXknO1xuICAgICAgICB9ZWxzZSBpZihtYWluLnRvcFJvcGUgJiYgIW1haW4ubGVhZCl7XG4gICAgICAgICAgbWFpbi5iZWxheSA9IFwiIGNhbiB0b3Atcm9wZSBiZWxheSBidXQgZG9lc24ndCBrbm93IGhvdyB0byBsZWFkIGJlbGF5IHlldC4uLlwiO1xuICAgICAgICB9ZWxzZSBpZighbWFpbi50b3BSb3BlICYmIG1haW4ubGVhZCl7XG4gICAgICAgICAgbWFpbi5iZWxheSA9IFwiIGNhbiBsZWFkIGJlbGF5IGJ1dCBkb2Vzbid0IGtub3cgaG93IHRvIHRvcC1yb3BlIGJlbGF5IHlldC4uLlwiO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBtYWluLmJlbGF5ID0gXCIgZG9lc24ndCBrbm93IGhvdyB0byBiZWxheSB5ZXQuLi5cIjtcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBjaGVja1RvcFJvcGUoKTtcbiAgICBjaGVja0xlYWQoKTtcblxuICAgIG1haW4uZW5kb3JzZVRvcFJvcGUgPSBmdW5jdGlvbigpe1xuICAgICAgUHJvZmlsZS5hZGRUb3BSb3BlKG1haW4uaWQsIGF1dGhEYXRhLnVpZCwgZnVuY3Rpb24oKXtcbiAgICAgICAgY2hlY2tUb3BSb3BlKCk7XG4gICAgICAgIFN3ZWV0QWxlcnQuc3dhbCh7XG4gICAgICAgICAgdGl0bGU6ICcrMSBUb3AtUm9wZSBCZWxheSEnLFxuICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsXG4gICAgICAgICAgdGltZXI6IDE1MDBcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgIH1cbiAgICBtYWluLmVuZG9yc2VMZWFkID0gZnVuY3Rpb24oKXtcbiAgICAgIFByb2ZpbGUuYWRkTGVhZChtYWluLmlkLCBhdXRoRGF0YS51aWQsIGZ1bmN0aW9uKCl7XG4gICAgICAgIGNoZWNrTGVhZCgpO1xuICAgICAgICBTd2VldEFsZXJ0LnN3YWwoe1xuICAgICAgICAgIHRpdGxlOiAnKzEgTGVhZCBCZWxheSEnLFxuICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsXG4gICAgICAgICAgdGltZXI6IDE1MDBcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrVG9wUm9wZSgpe1xuICAgICAgUHJvZmlsZS5nZXRUb3BSb3BlKG1haW4uaWQsIGZ1bmN0aW9uKHJlcyl7XG4gICAgICAgIG1haW4udG9wUm9wZU5hbWVzID0gW107XG4gICAgICAgIC8vbWFrZXMgc3VyZSB5b3UgY2FuJ3QgZW5kb3JzZSB0d2ljZSBhbmQgc2V0cyBwb3BvdmVyIGFycmF5XG4gICAgICAgIGZvcih2YXIgaWQgaW4gcmVzKXtcbiAgICAgICAgICBpZihyZXNbaWRdID09PSBhdXRoRGF0YS51aWQpe1xuICAgICAgICAgICAgbWFpbi5kaXNhYmxlVG9wUm9wZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIFByb2ZpbGUuZ2V0UHJvZmlsZShyZXNbaWRdLCBmdW5jdGlvbihwcm9maWxlT2JqKXtcbiAgICAgICAgICAgIG1haW4udG9wUm9wZU5hbWVzLnB1c2gocHJvZmlsZU9iai5uYW1lKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHByb2ZpbGVPYmopO1xuICAgICAgICAgICAgLy9saXN0cyBmaXJzdCArIG51bWJlciBvZiBlbmRvcnNlZFxuICAgICAgICAgICAgaWYobWFpbi50b3BSb3BlTmFtZXMubGVuZ3RoID4gMil7XG4gICAgICAgICAgICAgIG1haW4udG9wUm9wZVBlb3BsZSA9IG1haW4udG9wUm9wZU5hbWVzWzBdICsgJyBhbmQgJyArIChtYWluLnRvcFJvcGVOYW1lcy5sZW5ndGggLSAxKSArJyBvdGhlciBwZW9wbGUgdGhpbmsgJztcbiAgICAgICAgICAgIH1lbHNlIGlmKG1haW4udG9wUm9wZU5hbWVzLmxlbmd0aCA9PT0gMil7XG4gICAgICAgICAgICAgIG1haW4udG9wUm9wZVBlb3BsZSA9IG1haW4udG9wUm9wZU5hbWVzWzBdICsgJyBhbmQgMSBvdGhlciBwZXJzb24gdGhpbmsgJztcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICBtYWluLnRvcFJvcGVQZW9wbGUgPSBtYWluLnRvcFJvcGVOYW1lc1swXSArICcgdGhpbmtzICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2hlY2tMZWFkKCl7XG4gICAgICBQcm9maWxlLmdldExlYWQobWFpbi5pZCwgZnVuY3Rpb24ocmVzKXtcbiAgICAgICAgbWFpbi5sZWFkTmFtZXMgPSBbXTtcbiAgICAgICAgLy9tYWtlcyBzdXJlIHlvdSBjYW4ndCBlbmRvcnNlIHR3aWNlIGFuZCBzZXRzIHBvcG92ZXIgYXJyYXlcbiAgICAgICAgZm9yKHZhciBpZCBpbiByZXMpe1xuICAgICAgICAgIGlmKHJlc1tpZF0gPT09IGF1dGhEYXRhLnVpZCl7XG4gICAgICAgICAgICBtYWluLmRpc2FibGVMZWFkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgUHJvZmlsZS5nZXRQcm9maWxlKHJlc1tpZF0sIGZ1bmN0aW9uKHByb2ZpbGVPYmope1xuICAgICAgICAgICAgbWFpbi5sZWFkTmFtZXMucHVzaChwcm9maWxlT2JqLm5hbWUpO1xuICAgICAgICAgICAgLy9saXN0cyB3aG9ldmVyIGVuZG9yc2VkXG4gICAgICAgICAgICBpZihtYWluLmxlYWROYW1lcy5sZW5ndGggPiAyKXtcbiAgICAgICAgICAgICAgbWFpbi5sZWFkUGVvcGxlID0gbWFpbi5sZWFkTmFtZXNbMF0gKyAnIGFuZCAnICsgKG1haW4ubGVhZE5hbWVzLmxlbmd0aCAtIDEpICsnIG90aGVyIHBlb3BsZSB0aGluayAnO1xuICAgICAgICAgICAgfWVsc2UgaWYobWFpbi5sZWFkTmFtZXMubGVuZ3RoID09PSAyKXtcbiAgICAgICAgICAgICAgbWFpbi5sZWFkUGVvcGxlID0gbWFpbi5sZWFkTmFtZXNbMF0gKyAnIGFuZCAxIG90aGVyIHBlcnNvbiB0aGluayAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgbWFpbi5sZWFkUGVvcGxlID0gbWFpbi5sZWFkTmFtZXNbMF0gKyAnIHRoaW5rcyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcblxuICAgIC8vZ2V0IHRyaXAgbGlzdCB0byBzZWUgaWYgcHJvZmlsZSBzaG91bGQgbGluayB0byB0cmlwXG4gICAgT3V0c2lkZS5nZXRUcmlwcyhmdW5jdGlvbih0cmlwcyl7XG4gICAgICBtYWluLnRyaXBzID0gdHJpcHM7XG4gICAgICBmb3IodmFyIGlkIGluIHRyaXBzKXtcbiAgICAgICAgaWYobWFpbi5pZD09PWlkKXtcbiAgICAgICAgICBtYWluLnRyaXBMaW5rID0gJy8jL3RyaXAvJytpZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gIH0pXG4iXX0=
