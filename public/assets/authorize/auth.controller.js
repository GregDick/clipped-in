'use strict';

angular.module('clippedIn').controller('AuthCtrl', function (FB_URL, $rootScope, $scope, $location, Profile, SweetAlert) {
  var main = this;
  var fb = new Firebase(FB_URL);
  main.resetSuccess = false;
  main.changeSuccess = false;

  main.login = function (email, password) {
    fb.authWithPassword({
      email: email,
      password: password
    }, function (err, authData) {
      if (err) {
        SweetAlert.swal({
          title: 'Login Failed',
          type: 'error',
          text: err,
          allowOutsideClick: true,
          showConfirmButton: false,
          timer: 3000
        });
      } else {
        $rootScope.auth = authData;
        $('#modal').modal('hide');
        $location.path('/profile');
        $scope.$apply();
      }
    });
  };

  main.modalLoad = function () {
    $('#modal').modal('show');
    $('#modal').on('hidden.bs.modal', function (e) {
      $location.path('/login');
      $scope.$apply();
    });
  };

  main.register = function () {
    fb.createUser({
      email: main.secret.email,
      password: main.secret.password
    }, function (err, userData) {
      if (err) {
        console.log(err);
      } else {
        Profile.create(main.person, userData.uid, function () {
          main.login(main.secret.email, main.secret.password);
        });
      }
    });
  };

  main.resetPass = function () {
    fb.resetPassword({
      email: main.reset.email
    }, function (err) {
      if (err) {
        alert('Error: ' + err);
      } else {
        main.resetSuccess = true;
        $scope.$apply();
      }
    });
  };

  main.changePass = function () {
    fb.changePassword({
      email: main.temp.email,
      oldPassword: main.temp.oldPass,
      newPassword: main.temp.newPass
    }, function (error) {
      if (error) {
        alert('Error: ' + error);
      } else {
        main.changeSuccess = true;
        $rootScope.auth.password.isTemporaryPassword = false;
        $scope.$apply();
      }
    });
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hc3NldHMvYXV0aG9yaXplL2F1dGguY29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FDSixNQUFNLENBQUMsV0FBVyxDQUFDLENBQ25CLFVBQVUsQ0FBQyxVQUFVLEVBQUUsVUFBUyxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBQztBQUMxRixNQUFJLElBQUksR0FBRyxJQUFJLENBQUM7QUFDaEIsTUFBSSxFQUFFLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUIsTUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7QUFDMUIsTUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7O0FBRTNCLE1BQUksQ0FBQyxLQUFLLEdBQUcsVUFBUyxLQUFLLEVBQUUsUUFBUSxFQUFDO0FBQ3BDLE1BQUUsQ0FBQyxnQkFBZ0IsQ0FBQztBQUNsQixXQUFLLEVBQUUsS0FBSztBQUNaLGNBQVEsRUFBRSxRQUFRO0tBQ25CLEVBQUUsVUFBUyxHQUFHLEVBQUUsUUFBUSxFQUFDO0FBQ3hCLFVBQUcsR0FBRyxFQUFDO0FBQ0wsa0JBQVUsQ0FBQyxJQUFJLENBQUM7QUFDZCxlQUFLLEVBQUUsY0FBYztBQUNyQixjQUFJLEVBQUUsT0FBTztBQUNiLGNBQUksRUFBRSxHQUFHO0FBQ1QsMkJBQWlCLEVBQUUsSUFBSTtBQUN2QiwyQkFBaUIsRUFBRSxLQUFLO0FBQ3hCLGVBQUssRUFBRSxJQUFJO1NBQ1osQ0FBQyxDQUFBO09BQ0gsTUFBSTtBQUNILGtCQUFVLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztBQUMzQixTQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFCLGlCQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzNCLGNBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztPQUNqQjtLQUNGLENBQUMsQ0FBQTtHQUNILENBQUE7O0FBRUQsTUFBSSxDQUFDLFNBQVMsR0FBRyxZQUFVO0FBQ3pCLEtBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUIsS0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsRUFBRTtBQUM3QyxlQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3pCLFlBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUNqQixDQUFDLENBQUM7R0FDSixDQUFBOztBQUVELE1BQUksQ0FBQyxRQUFRLEdBQUcsWUFBVTtBQUN4QixNQUFFLENBQUMsVUFBVSxDQUFDO0FBQ1osV0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSztBQUN4QixjQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRO0tBQy9CLEVBQUUsVUFBUyxHQUFHLEVBQUUsUUFBUSxFQUFDO0FBQ3hCLFVBQUcsR0FBRyxFQUFDO0FBQ0wsZUFBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUNsQixNQUFJO0FBQ0gsZUFBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxHQUFHLEVBQUUsWUFBVTtBQUNsRCxjQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDckQsQ0FBQyxDQUFDO09BQ0o7S0FDRixDQUFDLENBQUE7R0FDSCxDQUFBOztBQUVELE1BQUksQ0FBQyxTQUFTLEdBQUcsWUFBWTtBQUMzQixNQUFFLENBQUMsYUFBYSxDQUFDO0FBQ2YsV0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSztLQUN4QixFQUFFLFVBQVMsR0FBRyxFQUFDO0FBQ2QsVUFBRyxHQUFHLEVBQUM7QUFDTCxhQUFLLENBQUMsU0FBUyxHQUFFLEdBQUcsQ0FBQyxDQUFDO09BQ3ZCLE1BQUk7QUFDSCxZQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztBQUN6QixjQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7T0FDakI7S0FDRixDQUFDLENBQUE7R0FDSCxDQUFBOztBQUVELE1BQUksQ0FBQyxVQUFVLEdBQUcsWUFBVTtBQUMxQixNQUFFLENBQUMsY0FBYyxDQUFDO0FBQ2hCLFdBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7QUFDdEIsaUJBQVcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87QUFDOUIsaUJBQVcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87S0FDL0IsRUFBRSxVQUFTLEtBQUssRUFBQztBQUNoQixVQUFHLEtBQUssRUFBQztBQUNQLGFBQUssQ0FBQyxTQUFTLEdBQUMsS0FBSyxDQUFDLENBQUM7T0FDeEIsTUFBSTtBQUNILFlBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQzFCLGtCQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUM7QUFDckQsY0FBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO09BQ2pCO0tBQ0YsQ0FBQyxDQUFBO0dBQ0gsQ0FBQTtDQUVGLENBQUMsQ0FBQyIsImZpbGUiOiJzcmMvYXNzZXRzL2F1dGhvcml6ZS9hdXRoLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyXG4gIC5tb2R1bGUoJ2NsaXBwZWRJbicpXG4gIC5jb250cm9sbGVyKCdBdXRoQ3RybCcsIGZ1bmN0aW9uKEZCX1VSTCwgJHJvb3RTY29wZSwgJHNjb3BlLCAkbG9jYXRpb24sIFByb2ZpbGUsIFN3ZWV0QWxlcnQpe1xuICAgIHZhciBtYWluID0gdGhpcztcbiAgICB2YXIgZmIgPSBuZXcgRmlyZWJhc2UoRkJfVVJMKTtcbiAgICBtYWluLnJlc2V0U3VjY2VzcyA9IGZhbHNlO1xuICAgIG1haW4uY2hhbmdlU3VjY2VzcyA9IGZhbHNlO1xuXG4gICAgbWFpbi5sb2dpbiA9IGZ1bmN0aW9uKGVtYWlsLCBwYXNzd29yZCl7XG4gICAgICBmYi5hdXRoV2l0aFBhc3N3b3JkKHtcbiAgICAgICAgZW1haWw6IGVtYWlsLFxuICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgIH0sIGZ1bmN0aW9uKGVyciwgYXV0aERhdGEpe1xuICAgICAgICBpZihlcnIpe1xuICAgICAgICAgIFN3ZWV0QWxlcnQuc3dhbCh7XG4gICAgICAgICAgICB0aXRsZTogJ0xvZ2luIEZhaWxlZCcsXG4gICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgdGV4dDogZXJyLFxuICAgICAgICAgICAgYWxsb3dPdXRzaWRlQ2xpY2s6IHRydWUsXG4gICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsXG4gICAgICAgICAgICB0aW1lcjogMzAwMFxuICAgICAgICAgIH0pXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICRyb290U2NvcGUuYXV0aCA9IGF1dGhEYXRhO1xuICAgICAgICAgICQoJyNtb2RhbCcpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9wcm9maWxlJyk7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIG1haW4ubW9kYWxMb2FkID0gZnVuY3Rpb24oKXtcbiAgICAgICQoJyNtb2RhbCcpLm1vZGFsKCdzaG93Jyk7XG4gICAgICAkKCcjbW9kYWwnKS5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBtYWluLnJlZ2lzdGVyID0gZnVuY3Rpb24oKXtcbiAgICAgIGZiLmNyZWF0ZVVzZXIoe1xuICAgICAgICBlbWFpbDogbWFpbi5zZWNyZXQuZW1haWwsXG4gICAgICAgIHBhc3N3b3JkOiBtYWluLnNlY3JldC5wYXNzd29yZFxuICAgICAgfSwgZnVuY3Rpb24oZXJyLCB1c2VyRGF0YSl7XG4gICAgICAgIGlmKGVycil7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgUHJvZmlsZS5jcmVhdGUobWFpbi5wZXJzb24sIHVzZXJEYXRhLnVpZCwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIG1haW4ubG9naW4obWFpbi5zZWNyZXQuZW1haWwsIG1haW4uc2VjcmV0LnBhc3N3b3JkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBtYWluLnJlc2V0UGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZiLnJlc2V0UGFzc3dvcmQoe1xuICAgICAgICBlbWFpbDogbWFpbi5yZXNldC5lbWFpbFxuICAgICAgfSwgZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgaWYoZXJyKXtcbiAgICAgICAgICBhbGVydCgnRXJyb3I6ICcrIGVycik7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIG1haW4ucmVzZXRTdWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgbWFpbi5jaGFuZ2VQYXNzID0gZnVuY3Rpb24oKXtcbiAgICAgIGZiLmNoYW5nZVBhc3N3b3JkKHtcbiAgICAgICAgZW1haWw6IG1haW4udGVtcC5lbWFpbCxcbiAgICAgICAgb2xkUGFzc3dvcmQ6IG1haW4udGVtcC5vbGRQYXNzLFxuICAgICAgICBuZXdQYXNzd29yZDogbWFpbi50ZW1wLm5ld1Bhc3NcbiAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgaWYoZXJyb3Ipe1xuICAgICAgICAgIGFsZXJ0KCdFcnJvcjogJytlcnJvcik7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIG1haW4uY2hhbmdlU3VjY2VzcyA9IHRydWU7XG4gICAgICAgICAgJHJvb3RTY29wZS5hdXRoLnBhc3N3b3JkLmlzVGVtcG9yYXJ5UGFzc3dvcmQgPSBmYWxzZTtcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gIH0pO1xuIl19
